\ add bio assertion, basic input output, assertions
 \ in examples [ok,wip], fix, false positives
  \ make option -k keep, to later inspect
   \ make the example script -f option to save to file and make executable
    \ record script that will create an example definition

\ make cursor characters with - and |, just two dimensional
\ make cursor blink


\ tui:use term ,curtises or urwid or Own

\ itui:ipython
 \ completion
  \ interactive via input()
   \ repl
\completion
 \ repl
  \ fish completion
   \ bash completion

\ hexy live edit shell
 \ completion
  \ help

\ colors
 \ single color
  \ range:rainbow,steel...
   \ conditional
    \ function

\ webui:svg,pyvg,d3js etc

 \ draw     point xy
  \         line xy X/x/Y/y/Z/z size
   \
    \       shapes: hexagon [ok]
     \              triangle
      \             rectangle
       \            square(almost)
        \           ngon
         \          circle
	  \         tree (recursion!!)
\ draw fill for shapes :character
 \         string(bubble,dialog)
  \        stream/file

\ use nav characters s,S: s=+ S=-
 \  s:x,y,z
  \ S:X,Y,Z
   \ show current position, absolute(without modulos for torus), correct to slice with cycle number.

\ optional: use center character no nav
 \ like h
  \    y u
   \  g h j
    \  v b

\ torus correction , obsolete, maybe better name "effect" instead of correction
 \        X=12
  \       x=45        #3*12 +9
   \      yc=int(X/x) #3
    \     x=x%X       #9
     \    y=yc+y%Y

\ torus mode (default on)
 \ option to disable
  \ rectangular or z->z,y->y,x->x
   \ custom function : bubble rules like

\ also keep the negatives in mind.


\ use spoints in instead of the named line funtions for x,y,z



\ types and order of displaying:
 \ layers:different grids
  \ p:previous
   \ c:current
    \ n:next
     \ m:meta, control and cursors,etc

\ in show order layers, enable disable

\ instead of layers:set/add cell overlays

\ read
 \  read from output into grid
  \ for easy re-editing and festing
   \   hexy draw -x 3 -y 3|hexy read -
    \  read:x=3
     \ read:y=3

\ modify/alter/update
 \ reorder
  \ colums, from->to, insert(7,pop(3))
   \ rows, from->to, insert(7,pop(3))
    \ combination of rows,colums
     \ conditions
      \ custom functions

\ transform
 \ stretch/squeeze
  \ rotate (steps of CCW 60 deg),ndeg

\ strip
 \ strip the
  \   -borders
   \  -rulers
    \ -grid


\ ruler is now like "12345678901234567890123"
 \ add ten's like   "         1         2   "
  \ from the current colum: int(i/10)
   \ likewise for 100/1000/etc
    \ options: 1,10,100
     \ vertical, need to align before adding more grid "counts"
      \ make a seperate ruler command, like show

\ hexy progress bars


\ fill hexcell basdd on fuctions of ...(x,y,z)
 \ ... like sum
  \         prod
   \        sin,cos,tan
    \       custom def...

\ draw with animation
 \ create a range: -rx 1:10
  \                -ry 1:10
   \               --delay/interval
    \              --clear (flag)

\ ultimate goal:game of life: hexylife, based on hexlife
 \ count neighbours
  \ hexcells, create a bigger object as an hexagonal cell
   \ fill gol grid with read config or randomly fill
    \ rule based cell  mutation
     \ rule entry
      \ animate
       \ loop detection
        \ local loop detection
         \ editor

\ utf8 characters  for drawing
 \ config templates which can be used to choose a theme

\ config project/: (pwd)/.hexy
 \ user          : ~/.hexy
  \ system       : /etc/hexy.cfg
   \ --configfile: use provided file

\ coding style
 \ style no tabs
  \ tab to one space
   \ ag "\ \" and replace multiple spaces

\ development workflow
 \ manage todo, via a tool,like todo-cli
  \ dependencies between todo tasks
   \ tree/tag  based
    \ create branch (use gitflow)
     \ create example from template (run created example script)
      \ do something to make example run, an keep the other examples running
       \ bioticks
        \ update version
         \ commit
          \ push
           \ pull request with working example

\ gitlab ci :http://192.168.122.208/help/ci/quick_start/README

\ log , like grid read
 \ reversse tail (HV,xyz)
  \ stream
   \ grep , highlight with hexagon bubbles and stats

\ tabs , no tabs in the grid, NEVER
 \ tabnanny, strict checks
  \ tabs for completion,navigation
   \ big fat warning: tabs will be treated  as a single space: "\t" >=>=> ' '
    \ where >=>=> meaning string.replace()
\ cry should raise the bar

\ circle make c like line, in a cycle
 \ this should always be the way.

\ formatting: vim
 \ # vim: tabstop=1 expandtab shiftwidth=1 softtabstop=1
  \ editor config
   \ ignore pep8 settings

\ use boltons
 \ use colored
  \ use clicl.getchar for navigation
   \ use of external libs via "deb"
    \ use of external libs via "deb"
     \ outside utils every import

\ create a repo like ascinema
 \ record,play,upload


\ hexy script commoand
 \ interpret a string of hexy commands to create and modify a drawing
  \ marginal hexy code : right aligned, somthing like this
     """ :|1 2 3 |:    ##      \ x:3
         :|------|:    ##       \ y:3
         :|. . . |1    ##        \ draw
         :| . . .|2    ##         \
         ;|. . . |3    ##          \
         :|------|     ##           \
         :| 1 2 3|     ##            \"""

